package main

import (
	"fmt"
	"html/template"
	"io"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/labstack/echo/v4/middleware"
)

type Template struct {
	templates *template.Template
}

func (t *Template) Render(w io.Writer, name string, data interface{}, c echo.Context) error {
	return t.templates.ExecuteTemplate(w, name, data)
}

func index(c echo.Context) error {
	return c.Render(http.StatusOK, "safe.html", map[string]interface{}{
		"username":   "Not Yet Set",
		"password":   "Not Yet Set",
		"csrf_value": c.Get("csrf").(string),
	})
}

func csrfCheck(c echo.Context) error {
	return c.Render(http.StatusOK, "safe.html", map[string]interface{}{
		"username":   c.FormValue("username"),
		"password":   c.FormValue("password"),
		"csrf_value": c.Get("csrf").(string),
	})
}

func main() {

	t := &Template{
		templates: template.Must(template.ParseGlob("./templates/*.html")),
	}

	e := echo.New()

	e.Use(middleware.Logger())
	e.Use(middleware.Recover())
	e.Renderer = t
	e.Use(middleware.CSRFWithConfig(middleware.CSRFConfig{
		TokenLookup: "form:csrf", ContextKey: "csrf", CookieMaxAge: 3600,
	}))

	e.GET("/", index)
	e.POST("/postform", csrfCheck)

	fmt.Println("Listening on http://localhost:8880/")

	e.Logger.Fatal(e.Start(":8880"))
}
